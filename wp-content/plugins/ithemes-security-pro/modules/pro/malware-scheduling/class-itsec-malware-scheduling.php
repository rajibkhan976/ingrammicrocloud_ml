<?php

class ITSEC_Malware_Scheduling {

	private
		$settings,
		$module_path;

	function run() {

		$this->settings    = get_site_option( 'itsec_malware_scheduling' );
		$this->module_path = ITSEC_Lib::get_module_path( __FILE__ );

		if ( isset( $this->settings['enabled'] ) && $this->settings['enabled'] === true ) {
			add_action( 'plugins_loaded', array( $this, 'plugins_loaded' ) );
			add_filter( 'itsec_sync_modules', array( $this, 'itsec_sync_modules' ) ); //register sync modules
		}

	}

	/**
	 * Register malware scheduling for Sync
	 *
	 * @param  array $sync_modules array of malware modules
	 *
	 * @return array                   array of logger modules
	 */
	public function itsec_sync_modules( $sync_modules ) {

		$sync_modules['malware_scheduling'] = array(
			'verbs'      => array(
				'itsec-get-malware-schedule'    => 'Ithemes_Sync_Verb_ITSEC_Get_Malware_Schedule',
				'itsec-get-file-list'           => 'Ithemes_Sync_Verb_ITSEC_Get_File_List',
				'itsec-modify-malware-schedule' => 'Ithemes_Sync_Verb_ITSEC_Modify_Malware_Schedule',
			),
			'everything' => 'itsec-get-malware-schedule',
			'path'       => dirname( __FILE__ ),
		);

		return $sync_modules;

	}

	/**
	 * Execute scheduled scans during plugins_loaded
	 *
	 * @since 4.3
	 *
	 * @return mixed false on error or void
	 */
	public function plugins_loaded() {

		global $itsec_globals, $itsec_malware;

		$last_scans    = get_site_option( 'itsec_malware_scheduling_last_scans' );
		$scan_executed = false; //Flag to prevent multiple executions per page load (reduce API overage)

		//Always make sure last scans is an array
		if ( $last_scans === false ) {
			$last_scans = array();
		}

		if ( ! isset( $last_scans['overall'] ) || ( $last_scans['overall'] < ( $itsec_globals['current_time'] - 30 ) ) ) { //only allow 1 scan every 30 seconds

			$queued = get_site_option( 'itsec_malware_scheduling_report_queue' );

			if ( $queued === false ) {
				$queued = array();
			}

			if ( sizeof( $queued ) > 0 ) {

				$reverse_queued = array_reverse( $queued );
				$resource        = array_pop( $reverse_queued );
				$report         = $itsec_malware->scan_report( $resource );
				$queued         = array_reverse( $reverse_queued );

			}

			//process individual scans first
			if ( isset( $this->settings['individual'] ) && is_array( $this->settings['individual'] ) ) {

				foreach ( $this->settings['individual'] as $item ) {

					if ( isset( $item['resource'] ) && strlen( $item['resource'] ) > 0 ) {

						if ( $scan_executed === false ) {

							switch ( $item['itype'] ) {

								case 0:
									$interval = 60 * 60; //Hourly
									break;
								case 1:
									$interval = 60 * 60 * 24; //Daily
									break;
								case 2:
									$interval = 60 * 60 * 24 * 7; //Weekly
									break;
								default:
									return false; //Invalid interval
									break;

							}

							$item_period = isset( $item['interval'] ) ? absint( $item['interval'] ) * $interval : 86400; //Default check period to 1 day

							//Execute resource scan
							if ( ! isset( $last_scans[$item['resource']] ) || ( $last_scans[$item['resource']] < ( $itsec_globals['current_time'] - $item_period ) ) ) {

								$scan = $itsec_malware->scheduled_scan( $item['type'], $item['resource'] );

								if ( isset( $scan['response_code'] ) && $scan['response_code'] === 1 ) { //Don't request a report if it isn't ready

									$report = $itsec_malware->scan_report( $scan['resource'] );

								} else { //Queue result for later

									$queued[] = $scan['resource'];

								}

								$scan_executed                 = true;
								$last_scans[$item['resource']] = $itsec_globals['current_time'];

							}

						}

					}

				}

			}

			//Standard scheduled scan
			if ( $scan_executed === false ) {

				$standard_period = isset( $this->settings['standard_interval'] ) ? absint( $this->settings['standard_interval'] ) * 60 : 300; //get interval in minutes

				if ( isset( $this->settings['standard'] ) && $this->settings['standard'] === true ) {

					if ( ! isset( $last_scans['standard'] ) || ( $last_scans['standard'] < ( $itsec_globals['current_time'] - $standard_period ) ) ) {

						$scan = $itsec_malware->scheduled_scan( 0, home_url( '', 'http' ) );

						if ( isset( $scan['response_code'] ) && $scan['response_code'] === 1 ) { //Don't request a report if it isn't ready

							$report = $itsec_malware->scan_report( $scan['resource'] );

						} else { //Queue result for later

							$queued[] = $scan['resource'];

						}

						$last_scans['standard'] = $itsec_globals['current_time'];

					}

				}

			}

			//Update scan time and save last scans
			$last_scans['overall'] = $itsec_globals['current_time'];
			update_site_option( 'itsec_malware_scheduling_last_scans', $last_scans );

			if ( sizeof( $queued ) > 0 ) {

				update_site_option( 'itsec_malware_scheduling_report_queue', $queued );

			} else {

				delete_site_option( 'itsec_malware_scheduling_report_queue' );

			}

		}

	}

}